name: Build Linux with Release

on:
  workflow_dispatch:

permissions:
  contents: write
  issues: write

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v4

    - name: Get version from file
      run: echo "VERSION=$(<VERSION)" >> $GITHUB_ENV

    - name: Set up Docker Build
      run: |
        echo "Creating Dockerfile"
        cat << 'EOF' > Dockerfile
        FROM ubuntu:20.04

        ARG DEBIAN_FRONTEND=noninteractive
        RUN apt-get update && \
            apt-get install -y python3.9 python3.9-dev python3-pip \
                               build-essential pkg-config libcairo2-dev \
                               libgirepository1.0-dev patchelf git && \
            apt-get clean && rm -rf /var/lib/apt/lists/*

        RUN python3.9 -m pip install --upgrade pip && \
            python3.9 -m pip install -U nuitka

        COPY requirements.txt /tmp/requirements.txt
        RUN python3.9 -m pip install --no-cache-dir -r /tmp/requirements.txt

        WORKDIR /app
        COPY . /app
        EOF

    - name: Build Docker Image
      run: docker build -t eminuto-build .

    - name: Compile with Nuitka inside Docker
      run: |
        docker run -v $(pwd):/app eminuto-build python3.9 -m nuitka --follow-imports --include-package=cryptography --include-module=mnemonic --include-package=src --enable-plugin=pyside6 --disable-console --standalone --output-dir=/app/dist --output-filename=eMinuto /app/main_qt.py --assume-yes-for-downloads
      shell: bash

    - name: Install linuxdeploy and AppImage tools
      run: |
        sudo apt-get update
        sudo apt-get install -y wget
        wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
        chmod +x linuxdeploy*.AppImage

    - name: Create AppImage
      run: |
        mkdir -p appimage/appdir
        cp -r dist/main_qt.dist/* appimage/appdir/
        ./linuxdeploy-x86_64.AppImage --appdir=appimage/appdir --output appimage

    - name: Debug - List appimage directory contents
      run: |
        echo "Contents of appimage directory:"
        ls -l appimage

    - name: Verify AppImage
      run: |
        if [ ! -f "./appimage/eMinuto*.AppImage" ]; then
          echo "AppImage file not found!"
          exit 1
        else
          echo "AppImage file found"
        fi

    - name: Check if release exists
      id: check_release
      uses: actions/github-script@v6
      with:
        script: |
          const releases = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          const release = releases.data.find(release => release.tag_name === `v${process.env.VERSION}`);
          if (release) {
            core.setOutput('release_id', release.id);
            core.setOutput('upload_url', release.upload_url);
          } else {
            core.setOutput('release_id', '');
            core.setOutput('upload_url', '');
          }

    - name: Debug - Check Release Outputs
      run: |
        echo "Release ID: ${{ steps.check_release.outputs.release_id }}"
        echo "Upload URL: ${{ steps.check_release.outputs.upload_url }}"

    - name: Create Release
      if: ${{ steps.check_release.outputs.release_id == '' }}
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.VERSION }}
        release_name: eMinuto v${{ env.VERSION }}
        draft: false
        prerelease: false

    - name: Debug - New Release Outputs
      if: ${{ steps.check_release.outputs.release_id == '' }}
      run: |
        echo "New release created."
        echo "Upload URL: ${{ steps.create_release.outputs.upload_url }}"

    - name: Set Upload URL for New Release
      if: ${{ steps.check_release.outputs.release_id == '' }}
      run: echo "UPLOAD_URL=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_ENV

    - name: Set Upload URL for Existing Release
      if: ${{ steps.check_release.outputs.release_id != '' }}
      run: echo "UPLOAD_URL=${{ steps.check_release.outputs.upload_url }}" >> $GITHUB_ENV

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        UPLOAD_URL: ${{ steps.create_release.outputs.upload_url || steps.check_release.outputs.upload_url }}
      with:
        upload_url: ${{ env.UPLOAD_URL }}
        asset_path: ./appimage/eMinuto*.AppImage
        asset_name: eMinuto-${{ env.VERSION }}-linux.AppImage
        asset_content_type: application/octet-stream
